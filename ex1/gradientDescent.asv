function [theta, J_history] = gradientDescent(X, y, theta, alpha, num_iters)
%GRADIENTDESCENT Performs gradient descent to learn theta
%   theta = GRADIENTDESCENT(X, y, theta, alpha, num_iters) updates theta by 
%   taking num_iters gradient steps with learning rate alpha

% Initialize some useful values
m = length(y); % number of training examples
J_history = zeros(num_iters, 1);

for iter = 1:num_iters
    hypoyhesis = theta(1) + theta(2).*X;
    j1=(1/m)*sum((theta(1)+theta(2).*X(k,2))-y(k));
    
    step = alpha .* 1/m;
    t = X*theta-y;
    tmp_theta_zero = step*sum(t);
%     fprintf('%f\n tmp_theta_zero', tmp_theta_zero);
    
    
    
    %tmp_theta_zero = theta(1,1) - (alpha .* 1/m .* (sum(X*theta - y)));
        
    
    step = alpha .* 1/m;
    t = X*theta-y;   
    tx = t*X;
    tmp_theta_one = step*sum(tx);
    fprintf('%f\n tmp_theta_one', tmp_theta_one);
    %tmp_theta_one = theta(2,1) - (alpha .* 1/m .* (sum((X*theta - y)*X)));
    theta(1,1) = theta(1,1) - tmp_theta_zero;
    theta(2,1) = theta(2,1) - tmp_theta_one;
    % Save the cost J in every iteration    
    J_history(iter) = computeCost(X, y, theta);
    fprintf(' ***** Theta found by gradient descent:\n');
    fprintf('%f\n', J_history);


end

end
